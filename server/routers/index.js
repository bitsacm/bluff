const express = require('express')
const router = new express.Router()
const jwt = require('jsonwebtoken')

const { generateAccessToken, verifyToken } = require('../middleware/auth') 
const User = require('../models/user') // User Model

const { google } = require('googleapis')  /* Library for generating Auth Url and  generating Access Token from Auth Code  */
const { OAuth2Client } = require('google-auth-library') /* Library Used for authenticating Access Token generated by Library Above */

/* Accessing Credential provided by Google to initial Google Login */
const CLIENT_ID = process.env.CLIENT_ID
const CLIENT_SECRET = process.env.CLIENT_SECRET
const REDIRECT_URL = process.env.REDIRECT_URI

/* New oAuth2Client using credential provided above */
const oAuth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL)

const client = new OAuth2Client(CLIENT_ID)


router.get('', (req, res) => {  
  res.render('index')
})



// Route for initialising login request
router.get('/login', async (req, res) => {
  if(!req.cookies.jwtToken){
    const url = oAuth2Client.generateAuthUrl({
    access_type : 'offline',
    scope : ["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"]
  })
    res.redirect(url)
  }else {
    try{
      const decrypt = await jwt.verify(req.cookies.jwtToken, process.env.JWT_SECRET_KEY)
      res.send({ message :"You are already logged in" })
    }catch(e){
       res.status(401).send({ error : "Try Again"}) 
    }
  }
})


/* Route for converting Auth code into Access Token and use getting user
  details and check if it already Exists in DB or not. In case if it does not
  exist create one and if it exits redirect it to '/profile'
*/
router.get('/redirect', generateAccessToken, async (req, res) => {  // Middleware for converting Auth Code into Access Token
  const token = req.id_token
  try{
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience : CLIENT_ID,
    })  // It contains all the information about the user
    const payload = ticket.getPayload()
    const userid = payload['sub']
    const { email, name, picture } = payload
    const user = await User.findOne({ email })  // Checking if user exist in DB
    if(!user){
      const user = new User({
        email,
        fullName : name.split(' ')[0],
        lastName : name.split(' ').reverse()[0],
        username : email.split('@')[0],
        avatar : picture,
      })
      await user.save()
      await user.generateAuthToken(res) // Defined in (../models/user.js) => Cookies are set using this along with that jwt Token is also generated
      res.send({ message:"User Created" })
    }else {
      await user.generateAuthToken(res)
      res.send({ message : 'User Already Exist' })
    }          
  }catch(e) {
    res.status(400).send({ error : e })
  }
})

router.get('/profile', verifyToken, (req, res) => {
  res.send({ email : req.cookies.email }) 
})

// For Logging User Out From Single Device (which he is currently using)
router.post('/logout', verifyToken, async (req, res) => {
  try{
    const user = await User.findOne({ _id : req._id })
    user.tokens = user.tokens.filter( (token) =>  token.token !== req.cookies.jwtToken ) // Deleting Token for array
   
    // Resetting Cookie
    await res.clearCookie("jwtToken")  
    await res.clearCookie("email")
    await user.save()
    res.redirect('/')
  }catch(e){
    res.status(400).send({ error : e })
  }
})


// For Logging Out User from All Devices
router.post('/logout/all', verifyToken, async( req, res) => { 
  try{
    const user = await User.findOne({ _id : req._id })
    user.tokens = []
    await res.clearCookie("jwtToken")  
    await res.clearCookie("email")
    await user.save()
    res.redirect('/')
  }catch(e){
    res.status(400).send({error : e})
  }
})


module.exports = router


